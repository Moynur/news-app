// Code generated by MockGen. DO NOT EDIT.
// Source: generate.go

// Package helpers is a generated GoMock package.
package helpers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockGenerator is a mock of Generator interface.
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator.
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance.
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// AsString mocks base method.
func (m *MockGenerator) AsString(input uuid.UUID) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsString", input)
	ret0, _ := ret[0].(string)
	return ret0
}

// AsString indicates an expected call of AsString.
func (mr *MockGeneratorMockRecorder) AsString(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsString", reflect.TypeOf((*MockGenerator)(nil).AsString), input)
}

// GenerateUUID mocks base method.
func (m *MockGenerator) GenerateUUID() (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUUID")
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUUID indicates an expected call of GenerateUUID.
func (mr *MockGeneratorMockRecorder) GenerateUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUUID", reflect.TypeOf((*MockGenerator)(nil).GenerateUUID))
}
