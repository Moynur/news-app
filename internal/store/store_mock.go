// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// CreateArticleIfNotExists mocks base method.
func (m *MockStorer) CreateArticleIfNotExists(request NewsArticle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticleIfNotExists", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateArticleIfNotExists indicates an expected call of CreateArticleIfNotExists.
func (mr *MockStorerMockRecorder) CreateArticleIfNotExists(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticleIfNotExists", reflect.TypeOf((*MockStorer)(nil).CreateArticleIfNotExists), request)
}

// GetRecordsAfterID mocks base method.
func (m *MockStorer) GetRecordsAfterID(ID, numberOfRecords int, filters Filters) ([]NewsArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordsAfterID", ID, numberOfRecords, filters)
	ret0, _ := ret[0].([]NewsArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordsAfterID indicates an expected call of GetRecordsAfterID.
func (mr *MockStorerMockRecorder) GetRecordsAfterID(ID, numberOfRecords, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordsAfterID", reflect.TypeOf((*MockStorer)(nil).GetRecordsAfterID), ID, numberOfRecords, filters)
}
